"""
Module containing functions to cleanup various stages of the chassis
expansion procedure.
"""
##############################################################################
# COPYRIGHT Ericsson AB 2020
#
# The copyright to the computer program(s) herein is the property
# of Ericsson AB. The programs may be used and/or copied only with
# the written permission from Ericsson AB or in accordance with the
# terms and conditions stipulated in the agreement/contract under
# which the program(s) have been supplied.
##############################################################################
import os
import logging

from expansion_sed_utils import ExpansionSedHandler
from expansion_model_handler import ExpansionModelHandler
from expansion_settings import REPORT_FILE, EXPANSION_MODEL_FILE
from h_util.h_utils import exec_process

LOGGER = logging.getLogger("enminst")


def cleanup_arp_cache():
    """
    Function that removes the old iLO IP addresses from the ARP cache.
    :return: None
    """
    # Get source iLO IPs from the model.
    model_handler = ExpansionModelHandler()
    moved_blades = model_handler.get_blades_in_model()

    LOGGER.info('Removing old iLO IPs from ARP cache')

    # Loop on them and run arp -d {ip}
    old_src_ilos = [blade.src_ilo for blade in moved_blades]
    for src_ilo in sorted(old_src_ilos):
        arp_command = 'arp -d {0}'.format(src_ilo)

        LOGGER.debug('Running command {0}'.format(arp_command))
        try:
            exec_process(arp_command.split())
        except IOError:
            LOGGER.info('No ARP entry to delete for iLO IP {0}'
                        .format(src_ilo))

    LOGGER.info('Successfully removed old iLO IPs from ARP cache')


def cleanup_runtime_files():
    """
    Function that removes the runtime files generated by the expansion
    procedure.
    :return: None
    """
    LOGGER.info('Deleting runtime files')

    # Check if the report file exists and delete it
    if os.path.exists(REPORT_FILE):
        LOGGER.info('Expansion report file {0} exists, deleting'
                    .format(REPORT_FILE))

        # Make report file mutable
        LOGGER.info('Making report file {0} mutable'.format(REPORT_FILE))
        try:
            command = 'chattr -i {0}'.format(REPORT_FILE)
            LOGGER.debug('Running command {0}'.format(command))
            exec_process(command.split())
        except IOError:
            LOGGER.error('Failed to make report file {0} mutable'
                         .format(REPORT_FILE))
            raise

        try:
            os.remove(REPORT_FILE)
        except OSError:
            LOGGER.error('Failed to delete {0}'.format(REPORT_FILE))
            raise
    # Check if the model file exists and delete it
    if os.path.exists(EXPANSION_MODEL_FILE):
        LOGGER.info('Expansion model file {0} exists, deleting'
                    .format(EXPANSION_MODEL_FILE))

        try:
            os.remove(EXPANSION_MODEL_FILE)
        except OSError:
            LOGGER.error('Failed to delete {0}'.format(EXPANSION_MODEL_FILE))
            raise

    LOGGER.info('Successfully deleted runtime files')


def cleanup_source_oa(expansion_sed):
    """
    Function that removes the iLO IP address for each bay that has
    has a blade moved.
    The bays are then efuse reset.
    :param expansion_sed: The target SED for the expansion.
    :return: None
    """

    # Init SED handler
    sed_handler = ExpansionSedHandler(expansion_sed)

    # Get src OA info from SED
    LOGGER.info('Getting source OA information from SED')
    src_oa = sed_handler.get_enclosure_oa_info('enclosure1')

    # Get list of blades moved from model
    model_handler = ExpansionModelHandler()
    LOGGER.info('Getting moved blades information from expansion model')
    moved_blades = model_handler.get_blades_in_model()

    LOGGER.info('Removing iLO IPs from bays that have moved.')
    # Disable ebipa server is moved bays
    moved_bays = [moved_blade.src_bay for moved_blade in moved_blades]
    for src_bay in sorted(moved_bays, key=int):

        LOGGER.info('Removing iLO IP from bay {0}'.format(src_bay))
        src_oa.disable_ebipa_server(src_bay)

    LOGGER.info('Saving the ebipa setting on source OA')
    src_oa.save_ebipa()

    LOGGER.info('Successfully cleaned source OA')
